datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Profile {
  id           String  @id @default(cuid())
  userId       String  @unique
  name         String
  imageUrl     String
  email        String
  hasSeenIntro Boolean @default(false)

  // Keep original relationships in original order
  streams Stream[]
  designSystem DesignSystem?
  flows        Flow[]
  servers      Server[]
  members      Member[]
  channels     Channel[]
  appConfigs   AppConfig[]
  mediaItems   MediaItem[]
  stellarProfile StellarProfile[]

  // Add new relationships after
  vaults Vault[]
  xpProfile XPProfile?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// New Stream model
// Existing Stream model (updated)
model Stream {
  id          String     @id @default(cuid())
  name        String
  description String?
  type        StreamType

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id])
  appId     String? // e.g. "orion"
  flows     Flow[] // Flows in this stream

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([appId])
}

// Add new enums
enum StreamType {
  CORE
  CONFIG
  CUSTOM
}

model DesignSystem {
  id        String   @id @default(cuid())
  name      String
  profileId String   @unique
  profile   Profile  @relation(fields: [profileId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  colorTokens      ColorToken[]
  typographyTokens TypographyToken[]
  flows            Flow[]

  @@index([profileId])
}

model ColorToken {
  id             String       @id @default(cuid())
  name           String
  value          String
  opacity        Int
  designSystemId String
  designSystem   DesignSystem @relation(fields: [designSystemId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([designSystemId])
}

model TypographyToken {
  id             String       @id @default(cuid())
  name           String
  fontFamily     String
  fontSize       String?
  fontWeight     String?
  lineHeight     String?
  letterSpacing  String?
  designSystemId String
  designSystem   DesignSystem @relation(fields: [designSystemId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([designSystemId])
}

model Flow {
  id             String          @id @default(cuid())
  appId          String? // e.g. "orion"
  name           String
  description    String?
  type           FlowType        @default(CORE)
  profileId      String
  profile        Profile         @relation(fields: [profileId], references: [id])
  streamId       String? // Optional as some flows might not belong to a stream
  stream         Stream?         @relation(fields: [streamId], references: [id])
  designSystemId String
  designSystem   DesignSystem    @relation(fields: [designSystemId], references: [id])
  components     FlowComponent[]
  appConfig      AppConfig? // New relation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([streamId])
  @@index([designSystemId])
  @@index([appId])
}

// Updated FlowType enum
enum FlowType {
  CORE // Design system standards
  CONFIG // App-specific mappings
  CUSTOM // User flows
}

model FlowComponent {
  id            String      @id @default(cuid())
  name          String
  type          String
  mode          String? // For icon fill
  value         String? // For icon fill
  outlineMode   String? // NEW: For border/outline
  outlineValue  String? // NEW: For border/outline
  opacity       Int?
  fontFamily    String?
  strokeWidth   Float?
  mappedTokenId String?
  mediaId       String?
  mediaItem     MediaItem[]
  mediaUrl      String?
  tokenId       String?
  tokenValue    String?
  outlineTokenId String? // NEW: For color token reference of outline
  order         Int

  flowId    String
  flow      Flow     @relation(fields: [flowId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([flowId])
}

// Add new enum for component types
// Add new enum for component types
enum ComponentType {
  COLOR
  TYPOGRAPHY
  WALLPAPER
  DOCK_ICON
  CURSOR
}

model MediaItem {
  id              String         @id @default(uuid())
  name            String // Original filename
  type            MediaType // Enum for media types
  url             String // Uploadcare CDN URL
  profileId       String
  profile         Profile        @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  FlowComponent   FlowComponent? @relation(fields: [flowComponentId], references: [id])
  flowComponentId String?

  @@index([profileId])
  @@index([flowComponentId])
}

enum MediaType {
  IMAGE
  VIDEO
  FONT
}

// New model for app configuration
model AppConfig {
  id        String @id @default(cuid())
  appId     String // e.g. "orion", "finder", etc.
  flowId    String @unique // One config flow per app
  profileId String

  flow    Flow    @relation(fields: [flowId], references: [id])
  profile Profile @relation(fields: [profileId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([appId, profileId])
  @@index([profileId])
  @@index([flowId])
}

// In your schema.prisma

model StellarProfile {
  id            String           @id @default(cuid())
  profileId     String           @unique
  profile       Profile          @relation(fields: [profileId], references: [id], onDelete: Cascade)
  name          String
  driveCapacity BigInt
  currentUsage  Int
  settings      StellarSettings?

  // For 1:1 root folder relation
  rootFolder   StellarFolder? @relation("RootFolder", fields: [rootFolderId], references: [id])
  rootFolderId String?        @unique // This ensures 1:1 for root folder

  // For 1:many regular folders - no unique constraint
  allFolders StellarFolder[] // This allows many folders per profile

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

model StellarFolder {
  id   String @id @default(cuid())
  name String

  // For folder hierarchy
  parentId String?
  parent   StellarFolder?  @relation("FolderToFolder", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  children StellarFolder[] @relation("FolderToFolder")

  position Json @default("{\"x\":0,\"y\":0}")

  files StellarFile[]

  // For the 1:1 root folder relation
  rootForProfile StellarProfile? @relation("RootFolder")

  // For the regular 1:many folder relation - REMOVED unique constraint
  stellarProfileId String
  stellarProfile   StellarProfile @relation(fields: [stellarProfileId], references: [id], onUpdate: Restrict)

  // EVOLVED: Added sidebar tracking
  inSidebar    Boolean @default(false)
  sidebarOrder Int? // null means not in sidebar

  @@index([parentId])
  @@index([stellarProfileId])
}

model StellarSettings {
  id               String         @id @default(cuid())
  stellarProfile   StellarProfile @relation(fields: [stellarProfileId], references: [id])
  stellarProfileId String         @unique
  defaultView      String
  sortBy           String
  showHidden       Boolean

  @@index([stellarProfileId])
}

model StellarFile {
  id              String        @id @default(cuid())
  name            String
  url             String
  size            Int
  mimeType        String
  position        Json          @default("{\"x\":0,\"y\":0}")
  stellarFolderId String
  stellarFolder   StellarFolder @relation(fields: [stellarFolderId], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@index([stellarFolderId])
}

// NEW: XP Account related enums
enum CreatorTier {
  STARTER
  VERIFIED
  ELITE
}

enum CreatorStatus {
  ACTIVE
  SUSPENDED
  BANNED
}

// NEW: XP Profile model
model XPProfile {
  id        String  @id @default(cuid())
  profileId String  @unique // Foreign key to Profile
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  // Basic XP Info
  displayName    String? // Optional display name different from profile name
  bio            String? @db.Text
  customImageUrl String? // Optional different image from profile

  // Creator Status
  creatorTier   CreatorTier   @default(STARTER)
  creatorStatus CreatorStatus @default(ACTIVE)
  isVerified    Boolean       @default(false)

  // Statistics
  totalDownloads         Int   @default(0)
  totalEarned            Float @default(0)
  designSystemsPublished Int   @default(0)

  // Engagement Metrics
  followersCount Int @default(0)
  followingCount Int @default(0)

  // Social & Contact
  website String?
  twitter String?
  github  String?

  // Published Content
  publishedDesignSystems DesignSystemPublication[]

  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  lastActiveAt DateTime @default(now())

  @@index([profileId])
}

// NEW: Design System Publication model
model DesignSystemPublication {
  id          String    @id @default(cuid())
  xpProfileId String // Foreign key to XPProfile
  xpProfile   XPProfile @relation(fields: [xpProfileId], references: [id], onDelete: Cascade)

  // Publication Details
  name            String
  description     String? @db.Text
  version         String  @default("1.0.0")
  previewImageUrl String?
  price           Float   @default(0)

  // Publication Status
  isPublished Boolean   @default(false)
  publishedAt DateTime?

  // Statistics
  downloads Int @default(0)
  likes     Int @default(0)

  // Content Reference
  designSystemId  String // Reference to original DesignSystem
  mediaReferences PublicationMediaReference[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([xpProfileId])
}

model PublicationMediaReference {
  id              String                  @id @default(cuid())
  publicationId   String
  publication     DesignSystemPublication @relation(fields: [publicationId], references: [id])
  originalMediaId String
  mediaUrl        String
  componentId     String

  @@index([publicationId])
}

// NEW: Following relationships
model CreatorFollow {
  id          String   @id @default(cuid())
  followerId  String // XPProfile ID of follower
  followingId String // XPProfile ID being followed
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Server {
  id         String @id @default(uuid())
  name       String
  imageUrl   String @db.Text
  inviteCode String @unique

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages       Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived  Conversation[] @relation("MemberTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id String @id @default(uuid())

  memberOneId String
  memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}

model DirectMessage {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}

// Obsidian-related models
model Vault {
  id        String  @id @default(cuid())
  name      String
  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  // Vault settings
  settings Json @default("{}")

  // Content organization
  folders ObsidianFolder[]
  notes   Note[]
  tags    Tag[]

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

model ObsidianFolder {
  id      String @id @default(cuid())
  name    String
  vaultId String
  vault   Vault  @relation(fields: [vaultId], references: [id], onDelete: Cascade)

  // Hierarchical structure
  parentId String?
  parent   ObsidianFolder?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  children ObsidianFolder[] @relation("FolderHierarchy")

  // Content
  notes Note[]

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([vaultId])
  @@index([parentId])
}

model Note {
  id      String @id @default(cuid())
  title   String
  content String @db.Text

  // Organization
  vaultId  String
  vault    Vault           @relation(fields: [vaultId], references: [id], onDelete: Cascade)
  folderId String?
  folder   ObsidianFolder? @relation(fields: [folderId], references: [id], onDelete: SetNull)

  // Metadata and note-specific features
  tags        Tag[]
  backlinks   Backlink[] @relation("SourceNote")
  linkedBy    Backlink[] @relation("TargetNote")
  aliases     String[] // Alternative titles for the note
  isDaily     Boolean @default(false)
  frontmatter Json?   @default("{}")

  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  lastAccessed DateTime @default(now())

  @@index([vaultId])
  @@index([folderId])
}

model Tag {
  id    String  @id @default(cuid())
  name  String
  color String? // Optional color for tag visualization

  // Relations
  vaultId String
  vault   Vault  @relation(fields: [vaultId], references: [id], onDelete: Cascade)
  notes   Note[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, vaultId]) // Tags should be unique within a vault
  @@index([vaultId])
}

model Backlink {
  id           String @id @default(cuid())
  sourceNoteId String
  targetNoteId String
  sourceNote   Note   @relation("SourceNote", fields: [sourceNoteId], references: [id], onDelete: Cascade)
  targetNote   Note   @relation("TargetNote", fields: [targetNoteId], references: [id], onDelete: Cascade)

  // Store the actual text context of the link
  context String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([sourceNoteId, targetNoteId])
  @@index([sourceNoteId])
  @@index([targetNoteId])
}

model User {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique
  firstname    String?
  lastname     String?
  createdAt    DateTime       @default(now())
  clerkid      String         @unique
  studio       Media?
  image        String?
  workspace    WorkSpace[]
  videos       Video[]
  subscription Subscription?
  members      OpalMember[]
  notification Notification[]
  sender       Invite[]       @relation("sender")
  reciever     Invite[]       @relation("reciever")
  trial        Boolean        @default(false)
  firstView    Boolean        @default(false)
  comment      Comment[]
}

model Comment {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  comment   String
  reply     Comment[] @relation("reply")
  Comment   Comment?  @relation("reply", fields: [commentId], references: [id], onUpdate: Restrict, onDelete: Restrict)
  commentId String?   @db.Uuid
  User      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?   @db.Uuid
  Video     Video?    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId   String?   @db.Uuid
  createdAt DateTime  @default(now())

  @@index([userId])
  @@index([commentId])
  @@index([videoId])
}

model Subscription {
  id         String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User       User?             @relation(fields: [userId], references: [id])
  userId     String?           @unique @db.Uuid
  createdAt  DateTime          @default(now())
  plan       SUBSCRIPTION_PLAN @default(FREE)
  updatedAt  DateTime          @default(now())
  customerId String?           @unique
}

model Media {
  id     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  screen String?
  mic    String?
  camera String?
  preset PRESET  @default(SD)
  User   User?   @relation(fields: [userId], references: [id])
  userId String? @unique @db.Uuid
}

model WorkSpace {
  id        String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type      Type
  name      String
  User      User?        @relation(fields: [userId], references: [id])
  userId    String?      @db.Uuid
  createdAt DateTime     @default(now())
  folders   Folder[]
  videos    Video[]
  members   OpalMember[]
  invite    Invite[]

  @@index([userId])
}

model Folder {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String     @default("Untitled Folder")
  createdAt   DateTime   @default(now())
  WorkSpace   WorkSpace? @relation(fields: [workSpaceId], references: [id])
  workSpaceId String?    @db.Uuid
  videos      Video[]

  @@index([workSpaceId])
}

model Video {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String?    @default("Untilted Video")
  description String?    @default("No Description")
  source      String     @unique
  createdAt   DateTime   @default(now())
  Folder      Folder?    @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId    String?    @db.Uuid
  User        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?    @db.Uuid
  processing  Boolean    @default(true)
  WorkSpace   WorkSpace? @relation(fields: [workSpaceId], references: [id], onDelete: Cascade)
  workSpaceId String?    @db.Uuid
  views       Int        @default(0)
  summery     String?
  Comment     Comment[]

  @@index([userId])
  @@index([folderId])
  @@index([workSpaceId])
}

model OpalMember {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User        User?      @relation(fields: [userId], references: [id])
  userId      String?    @db.Uuid
  createdAt   DateTime   @default(now())
  member      Boolean    @default(true)
  WorkSpace   WorkSpace? @relation(fields: [workSpaceId], references: [id])
  workSpaceId String?    @db.Uuid

  @@index([userId])
  @@index([workSpaceId])
}

model Notification {
  id      String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User    User?   @relation(fields: [userId], references: [id])
  userId  String? @db.Uuid
  content String

  @@index([userId])
}

model Invite {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sender      User?      @relation("sender", fields: [senderId], references: [id])
  senderId    String?    @db.Uuid
  reciever    User?      @relation("reciever", fields: [recieverId], references: [id])
  recieverId  String?    @db.Uuid
  content     String
  WorkSpace   WorkSpace? @relation(fields: [workSpaceId], references: [id])
  workSpaceId String?    @db.Uuid
  accepted    Boolean    @default(false)

  @@index([senderId])
  @@index([recieverId])
  @@index([workSpaceId])
}

enum Type {
  PERSONAL
  PUBLIC
}

enum PRESET {
  HD
  SD
}

enum SUBSCRIPTION_PLAN {
  PRO
  FREE
}